{"version":3,"sources":["webpack:///./src/components/Link/index.tsx","webpack:///./src/pages/projects/index.tsx"],"names":["CustomLink","to","className","children","test","href","Projects","styled","div","ProjectWrapper","ImageTitleWrapper","OverflowingLink","Link","Title","h3","Description","p","ToolsUsed","span","IndexPage","data","allMarkdownRemark","edges","location","pathname","relevantPosts","filter","post","node","fields","slug","startsWith","Layout","PageWrapper","map","id","frontmatter","featuredImage","featuredImage2","link","title","tools","intro","key","placeholderStyle","fadeIn","sizes","childImageSharp","base64","sqip","dataURI","style","marginTop","String","projectQuery"],"mappings":"+OAoBeA,MAXV,EAAGC,KAAIC,YAAWC,cALrB,sDAAsDC,KAMhDH,GACJ,uBAAGI,KAAMJ,EAAIC,UAAWA,GACrBC,GAGH,kBAAC,OAAD,CAAMF,GAAIA,EAAIC,UAAWA,GACtBC,GCRP,MAAMG,EAAWC,IAAOC,IAAV,wEAAGD,CAAH,0FAURE,EAAiBF,IAAOC,IAAV,8EAAGD,CAAH,wEAQdG,EAAoBH,IAAOC,IAAV,iFAAGD,CAAH,wBAMjBI,EAAkBJ,YAAOK,GAAV,+EAAGL,CAAH,iTA6BfM,EAAQN,IAAOO,GAAV,qEAAGP,CAAH,eAILQ,EAAcR,IAAOS,EAAV,2EAAGT,CAAH,iCAKXU,EAAYV,IAAOW,KAAV,yEAAGX,CAAH,kFAiFAY,UArEV,EACHC,MACEC,mBAAqBC,UAEvBC,UAAYC,gBAEZ,MAAMC,EAAgBH,EAAMI,OAAQC,GAClCA,EAAKC,KAAKC,OAAOC,KAAKC,WAAW,eAGnC,OACE,kBAACC,EAAA,EAAD,CAAQR,SAAUA,GAChB,kBAACS,EAAA,EAAD,KACE,kBAAC3B,EAAD,KACGmB,EAAcS,IAAI,EAEfN,MACEO,KACAC,aACEC,gBACAC,iBACAC,OACAC,QACAC,QACAC,SAEFb,QAAUC,YAKZ,kBAACrB,EAAD,CAAgBkC,IAAKR,GACnB,kBAACzB,EAAD,KACE,kBAAC,IAAD,CACEkC,iBAAkB,GAClBC,QAAQ,EACRC,MAAK,iBACAT,EAAcU,gBAAgBD,MAD9B,CAEHE,OAAQX,EAAcU,gBAAgBE,KAAKC,YAG9CZ,GACC,kBAAC,IAAD,CACEM,iBAAkB,GAClBC,QAAQ,EACRC,MAAK,iBACAR,EAAeS,gBAAgBD,MAD/B,CAEHE,OAAQV,EAAeS,gBAAgBE,KAAKC,UAE9CC,MAAO,CAAEC,UAAW,KAGxB,kBAACvC,EAAD,KACE,kBAACF,EAAD,CAAiBV,GAAIoD,OAAOd,GAAQT,IACjCuB,OAAOb,MAId,kBAACvB,EAAD,KAAYwB,GACZ,kBAAC1B,EAAD,KAAc2B,SAYvB,MAAMY,EAAe","file":"component---src-pages-projects-index-tsx-87bac48eaea9db8a7eb1.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst isUrl = (url: string) =>\n  /^(?:\\w+:)?\\/\\/([^\\s.]+\\.\\S{2}|localhost[:?\\d]*)\\S*$/.test(url)\n\nconst CustomLink: React.FunctionComponent<{\n  to: string\n  className?: string\n}> = ({ to, className, children }) =>\n  isUrl(to) ? (\n    <a href={to} className={className}>\n      {children}\n    </a>\n  ) : (\n    <Link to={to} className={className}>\n      {children}\n    </Link>\n  )\n\nexport default CustomLink\n","import React from 'react'\nimport Img from 'gatsby-image'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport Layout from '~/components/Layout'\nimport PageWrapper from '~/components/PageWrapper'\nimport Link from '~/components/Link'\n\nconst Projects = styled.div`\n  column-count: 2;\n  column-gap: 1em;\n\n  @media (max-width: 700px) {\n    column-count: 1;\n    column-gap: 0;\n  }\n`\n\nconst ProjectWrapper = styled.div`\n  margin: 0 0 2em;\n  break-inside: avoid;\n  display: inline-block;\n  width: 100%;\n`\n\n// By using positon: relative we define the limit of the overflowing link\nconst ImageTitleWrapper = styled.div`\n  position: relative;\n`\n\n// To maintain a solid a11y tree the link only contains the title, but overflows\n// to make the image clickable as well.\nconst OverflowingLink = styled(Link)`\n  ::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 3;\n  }\n\n  text-decoration: none;\n  margin: 0.5em 0 0.25em 0;\n  display: inline-block;\n  color: var(--pink);\n  border-bottom: none;\n  font-size: 1.75rem;\n  font-weight: bold;\n  word-spacing: -0.3ch;\n\n  :hover {\n    border-bottom: none;\n  }\n\n  @media print {\n    word-spacing: initial;\n  }\n`\n\nconst Title = styled.h3`\n  margin: 0;\n`\n\nconst Description = styled.p`\n  font-size: smaller;\n  margin: 0;\n`\n\nconst ToolsUsed = styled.span`\n  color: var(--gray);\n  font-size: smaller;\n  display: inline-block;\n  margin-bottom: 1rem;\n`\n\nconst IndexPage: React.FunctionComponent<{\n  data: any // type checked by GraphQL\n  location: {\n    pathname: string\n  }\n}> = ({\n  data: {\n    allMarkdownRemark: { edges }\n  },\n  location: { pathname }\n}) => {\n  const relevantPosts = edges.filter((post: any) =>\n    post.node.fields.slug.startsWith('/projects/')\n  )\n\n  return (\n    <Layout pathname={pathname}>\n      <PageWrapper>\n        <Projects>\n          {relevantPosts.map((\n            {\n              node: {\n                id,\n                frontmatter: {\n                  featuredImage,\n                  featuredImage2,\n                  link,\n                  title,\n                  tools,\n                  intro\n                },\n                fields: { slug }\n              }\n            }: any /* type checked by GraphQL */\n          ) => {\n            return (\n              <ProjectWrapper key={id}>\n                <ImageTitleWrapper>\n                  <Img\n                    placeholderStyle={{}}\n                    fadeIn={false}\n                    sizes={{\n                      ...featuredImage.childImageSharp.sizes,\n                      base64: featuredImage.childImageSharp.sqip.dataURI\n                    }}\n                  />\n                  {featuredImage2 && (\n                    <Img\n                      placeholderStyle={{}}\n                      fadeIn={false}\n                      sizes={{\n                        ...featuredImage2.childImageSharp.sizes,\n                        base64: featuredImage2.childImageSharp.sqip.dataURI\n                      }}\n                      style={{ marginTop: 3 }}\n                    />\n                  )}\n                  <Title>\n                    <OverflowingLink to={String(link || slug)}>\n                      {String(title)}\n                    </OverflowingLink>\n                  </Title>\n                </ImageTitleWrapper>\n                <ToolsUsed>{tools}</ToolsUsed>\n                <Description>{intro}</Description>\n              </ProjectWrapper>\n            )\n          })}\n        </Projects>\n      </PageWrapper>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const projectQuery = graphql`\n  query ProjectsOverviewQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tools\n            templateKey\n            intro\n            link\n            featuredImage {\n              childImageSharp {\n                sqip(numberOfPrimitives: 24, blur: 0, width: 256) {\n                  dataURI\n                  svg\n                }\n                sizes(maxWidth: 600) {\n                  ...GatsbyImageSharpSizes_withWebp_noBase64\n                }\n              }\n            }\n            featuredImage2 {\n              childImageSharp {\n                sqip(numberOfPrimitives: 24, blur: 0, width: 256) {\n                  dataURI\n                  svg\n                }\n                sizes(maxWidth: 600) {\n                  ...GatsbyImageSharpSizes_withWebp_noBase64\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}